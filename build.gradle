buildscript {
    ext.nee_version = '0.2.0-SNAPSHOT'
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.50'
    id 'nu.studer.jooq' version '3.0.3'
}

apply plugin: 'java'

group 'pl.setblack'
version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.jooq:jooq'
    implementation 'io.vavr:vavr-kotlin:0.10.2'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    jooqRuntime 'com.h2database:h2:1.4.193'
    implementation "pl.setblack:nee-core:${nee_version}"
    implementation "pl.setblack:nee-jdbc:${nee_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // https://mvnrepository.com/artifact/org.liquibase/liquibase-core
    implementation group: 'org.liquibase', name: 'liquibase-core', version: '3.8.0'

}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jooq {
    version = '3.11.11'
    edition = 'OSS'
    sample(sourceSets.main) {
        jdbc {
            driver = 'org.h2.Driver'
            url = 'jdbc:h2:~/kotlin-stones;AUTO_SERVER=TRUE'
            user = 'sa'
            password = ''
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            database {
                name = 'org.jooq.meta.h2.H2Database'
                includes = '.*'
                excludes = ''
            }
            target {
                packageName = 'pl.setblack.kstones.dbModel'
            }
        }
    }
}

tasks.generateSampleJooqSchemaSource.with {
    def out = new ByteArrayOutputStream()
    javaExecSpec = { JavaExecSpec s ->
        s.standardOutput = out
        s.errorOutput = out
        s.ignoreExitValue = true
        s.jvmArgs '-Xmx512M'
    }
    execResultHandler = { ExecResult r ->
        if (r.exitValue != 0) {
            throw new RuntimeException('jOOQ source code generation failed:\n\n' + out.toString())
        }
    }
}