<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ReturnUnit:DbConnection.kt${ connection = JdbcConnection(dbConnection) }</ID>
    <ID>ReturnUnit:InfrastuctureModule.kt$InfrastuctureModule${ upgradeDatabase() }</ID>
    <ID>ReturnUnit:Main.kt${ configError -&gt; println("error loading config: $configError") }</ID>
    <ID>ReturnUnit:Main.kt${ oauth -&gt; startServer(oauth) }</ID>
    <ID>ReturnUnit:StoneRest.kt$StoneRest$Route.() -&gt; Unit</ID>
    <ID>ReturnUnit:StoneRest.kt$StoneRest${ call.respondText("HELLO WORLD!") }</ID>
    <ID>ReturnUnit:StoneRest.kt$StoneRest${ install(ContentNegotiation) { jackson { this.registerModule(VavrModule()) this.registerModule(KotlinModule()) } } get("/stones/{id}") { val id = call.parameters["id"]!!.toLong() val stone = stoneService.getStone(id) webContext.create(call).serveMessage(webContext.async { stone }) } get("/stones") { val stones = stoneService .allStones() webContext.create(call).serveMessage(webContext.async { stones }) } post("/stones/{id}/vote") { val id = call.parameters["id"]!!.toLong() val res = voteService.vote(id) webContext.create(call).serveMessage(webContext.async { res }) } post("/stones") { val newStone = call.receive&lt;StoneData&gt;() val stoneAdded = stoneService.addStone(newStone) webContext.create(call).serveMessage(webContext.async { stoneAdded }) } get("/demo") { call.respondText("HELLO WORLD!") } }</ID>
    <ID>ReturnUnit:StoneRest.kt$StoneRest${ jackson { this.registerModule(VavrModule()) this.registerModule(KotlinModule()) } }</ID>
    <ID>ReturnUnit:StoneRest.kt$StoneRest${ this.registerModule(VavrModule()) this.registerModule(KotlinModule()) }</ID>
    <ID>ReturnUnit:StoneRest.kt$StoneRest${ val id = call.parameters["id"]!!.toLong() val res = voteService.vote(id) webContext.create(call).serveMessage(webContext.async { res }) }</ID>
    <ID>ReturnUnit:StoneRest.kt$StoneRest${ val id = call.parameters["id"]!!.toLong() val stone = stoneService.getStone(id) webContext.create(call).serveMessage(webContext.async { stone }) }</ID>
    <ID>ReturnUnit:StoneRest.kt$StoneRest${ val newStone = call.receive&lt;StoneData&gt;() val stoneAdded = stoneService.addStone(newStone) webContext.create(call).serveMessage(webContext.async { stoneAdded }) }</ID>
    <ID>ReturnUnit:StoneRest.kt$StoneRest${ val stones = stoneService .allStones() webContext.create(call).serveMessage(webContext.async { stones }) }</ID>
    <ID>ReturnUnit:StoneService.kt$StoneService${ }</ID>
  </CurrentIssues>
</SmellBaseline>
